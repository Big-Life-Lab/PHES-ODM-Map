intermediary <- full_join(wwMeasure, wwVirusBlanks, "sampleID", relationship = "many-to-many")
raw_wwData <- full_join(intermediary, wwVirusLong, #"sampleID",
relationship = "many-to-many")
# impute mising values within a sample to other srows for the same given sample
wwData <- raw_wwData %>%
group_by(sampleID) %>%
fill(everything(), .direction = "downup") %>%
ungroup()
View(wwData)
parts <- read.csv("ref-tables-v2/ODM_parts_2.1.0 copy.csv")
sets <- read.csv("ref-tables-v2/ODM_sets_2.1.0 copy.csv")
languages <- read.csv("ref-tables-v2/ODM_languages_2.1.0 copy.csv")
translations <- read.csv("ref-tables-v2/ODM_translations_2.1.0 copy.csv")
countries <- read.csv("ref-tables-v2/ODM_countries_2.1.0 copy.csv")
zones <- read.csv("ref-tables-v2/ODM_zones_2.1.0 copy.csv")
# build measures table, fill in some missing points where possible
measures <- data.frame(
sampleID = wwData$sampleID,
purpose = as.factor("testing"),
polygonID = NA,
siteID = wwData$siteID,
datasetID = wwData$labID,
measureSetRepID = NA, #maybe build around samples....?
aDateStart = NA,
aDateEnd = wwData$analysisDate,
reportDate = wwData$reportDate,
compartment = as.factor("wat"),
specimen = as.factor("sa"),
fraction = wwData$fractionAnalyzed,
group = NA, # code to populate this under development below
class = NA, # code to populate this under development below
measure = wwData$type,
value = wwData$value,
unit = wwData$unit,
aggregation = wwData$aggregation,
nomenclature = NA,
index = NA,
measureLic = as.factor("open"),
reportable = TRUE,
organizationID = wwData$labID,
contactID = as.factor("delatollaLab"),
refLink = "https://github.com/Delatolla-lab/PHESD",
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build unique measure report IDs
measures <- measures %>%
mutate(measureRepID = paste(sampleID, measure, row_number(), sep = ""))
# populate the protocol IDs
measures <- measures %>%
mutate(protocolID = ifelse(measure == "covN1", "pgsSolidsN1",
ifelse(measure == "covN2", "pgsSolidsN2",
ifelse(measure == "nPPMoV", "pgsSolidsPmmv", NA))))
# populate group and class
#measures <- measures %>%
#  mutate(group = ifelse(measure == "covN1", "sarsCov2",
#                             ifelse(measure == "covN2", "sarsCov2",
#                                    ifelse(measure == "nPPMoV", "pgsSolidsPmmv", NA))))
#measures <- measures %>%
#  mutate(class = ifelse(measure == "covN1", "allele",
#                        ifelse(measure == "covN2", "allele",
#                               ifelse(measure == "nPPMoV", "pgsSolidsPmmv", NA))))
# reorder columns to match ERD
measures <- measures %>%
select(measureRepID, protocolID, everything())
# build samples table, fill in some missing points where possible
samples <- data.frame(
sampleID = wwData$sampleID,
protocolID = NA,
organizationID = wwData$labID,
contactID = as.factor("delatollaLab"),
siteID = wwData$siteID,
purpose = as.factor("testing"),
saMaterial = as.factor("pSludge"),
datasetID = wwData$labID,
origin = as.factor("field"), # maybe double check this?
repType = as.factor("unique"), # maybe double check this?
collType = as.factor("timePr"),
collPer = 24,
collNum = 24,
pooled = FALSE, # double check this, please
collDT = wwData$sampleDate,
collDTStart = NA,
collDTEnd = NA,
sentDate = as.factor("NR"),
recDate  = as.factor("NR"),
reportable = TRUE,
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build qualityReports table, fill in some missing points where possible
qualityReports <- data.frame(
measureRepID = measures$measureRepID,
sampleID = NA,
measureSetRepID = NA,
qualityFlag = ifelse(wwData$qualityFlag ==FALSE, "noConcern", "qf1"),
severity = NA,
lastEdited = as.Date("2024-02-05"),
notes = NA
)
qualityReports <- qualityReports %>%
mutate(qualityReportID = paste(qualityFlag, measureRepID))
# reorder columns to match ERD
qualityReports <- qualityReports %>%
select(qualityReportID, everything())
# build datasets table, fill in some missing points where possible
datasets <- data.frame(
parDatasetID = NA,
datasetID = wwData$labID[1],
datasetDate = as.Date("2020-04-08"),
name = "Delatolla Group University of Ottawa - Open Data",
license = "Open",
descr = "The open data for Ottawa wastewater surveillance from the Delatolla Research group at the University of Ottawa. Testing is done for SARS-CoV-2 and other major pathogens.",
refLink = "https://github.com/Delatolla-lab/PHESD",
lang = "eng",
funderCont = NA,
custodyCont = "delatollaLab",
funderID = NA,
custodyID = "Ottawa-1",
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build organizations table, fill in some missing points where possible
organizations <- data.frame(
organizationID = wwData$labID[1],
name = "Delatolla Group - University of Ottawa",
descr = "The Delatolla Research group is based at the University of Ottawa. Our research focuses on the application of wastewater-based surveillance as an early warning system for future pandemic preparedness and the implementation of wastewater-based surveillance to improve health equity in Canada and globally. Our research group is also currently interested in advancing the detection and quantification of biological targets of population and public health importance in waters and wastewaters. We have particular interest in developing protocols and best practices to translate water and wastewater derived biological target data into population and public health action. In addition, our group performs research to leverage modern analytical methods to advance our understanding of wastewater technologies and to optimize wastewater treatment technologies to protect natural waters.",
addressID = "delatollaOttawa",
datasetID = wwData$labID[1],
orgType = "academ",
orgLevel = NA,
orgSector = "research",
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build sites table, fill in some missing points where possible
sites <- data.frame(
parSiteID = NA,
siteID = wwData$siteID[1],
datasetID = wwData$labID[1],
polygonID = NA,
siteType = "wwtp",
sampleShed = "municp",
addressID = "ropec",
organizationID = wwData$labID[1],
contactID = NA,
name = wwData$siteName[1],
descr = "The Robert O. Pickard Environmental Centre is a waste water treatment facility in Ottawa, Ontario, Canada. It provides secondary treatment to about 720,000 people.",
repOrg1 = "Ottawa-1",
repOrg2 = NA,
healthRegion = "Ontario Health Region - East",
popServ = 1100000,
geoLat = 45.454147,
geoLong = -75.59248,
geoEPSG = NA,
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build addresses table, fill in some missing points where possible
addresses <- data.frame(
addressID = c("delatollaOttawa", "ropec"),
datasetID = rep(wwData$labID[1],2),
addL1 = c("161 Louis-Pasteur","800 Green Creek Dr"),
addL2 = c("Room A108",NA),
city = c("Ottawa","Gloucester"),
stateProvReg = rep("Ontario",2),
pCode = c("K1N 6N5","K1J 1K6"),
country = rep("Canada",2),
lastEdited = as.Date("2024-02-05"),
notes = NA,
isoCode = rep("CA",2),
isoZone = rep("CA-ON",2)
)
# build contacts table, fill in some missing points where possible
contacts <- data.frame(
contactID = "delatollaLab",
datasetID = wwData$labID[1],
organizationID = wwData$labID[1],
firstName = "Robert",
lastName = "Delatolla",
email = "robert.delatolla@uottawa.ca",
phone = NA,
role = "Principle Investigator",
lastEdited = as.Date("2024-02-05"),
notes = "Dr. Robert Delatolla"
)
protocols <- read.csv("protocols-tables-Delatolla-V2/protocols.csv")
protocolRelationships <- read.csv("protocols-tables-Delatolla-V2/protocolRelationships.csv")
protocolSteps <- read.csv("protocols-tables-Delatolla-V2/protocolSteps.csv")
# build instruments table, fill in some missing points where possible
summary(as.factor(protocolSteps$Instrument.ID))
instruments <- data.frame(
instrumentID = as.factor(protocolSteps$Instrument.ID[complete.cases(protocolSteps$Instrument.ID) == T]),
datasetID = as.factor(datasets$datasetID),
name = c(NA,NA,"Delatolla - qPCR thermocycler"),
model = c(NA,NA,"CFX Connect qPCR thermocycler"),
manufacturer = c(NA,NA,"Bio-Rad"),
contactID = as.factor(contacts$contactID),
organizationID = as.factor(organizations$organizationID),
descr = c("Centrifuge machine","shaker tray machine","The CFX Connect real-time PCR detection system offers two-target analysis, excellent thermal cycler specifications, and the same reliable performance as the CFX96 Touchâ„¢ real-time PCR detection system. The system incorporates innovative optical technologies with powerful software to provide maximal reliability and efficiency for all the real-time PCR needs."),
refLink = NA,
insType = as.factor("ola"),
insTypeOth = NA,
index = NA,
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build measureSets table, fill in some missing points where possible
measureSets <- data.frame(
measureSetRepID = NA,
protocolID = NA,
name = NA,
organizationID = NA,
contactID = NA,
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build polygons table, fill in some missing points where possible
polygons <- data.frame(
polygonID = NA, #Add details once info is available
datasetID = datasets$datasetID[1],
name = "ROPEC-Ottawa Metropolitan Area Sewershed",
descr = "Polygon for the Ottawa Metropolitan area sewershed serviced by the ROPEC wastewater treatment plant",
polyPop = 1100000,
geoType = NA,
geoEPSG = NA,
geoWKT = NA,
fileLocation = NA,
refLink = NA,
organizationID = organizations$organizationID[1],
contactID = contacts$contactID[1],
lastEdited = as.Date("2024-02-05"),
notes = NA
)
# build sampleRelationships table, fill in some missing points where possible
sampleRelationships <- data.frame(
sampleRelationshipsID = NA,
sampleIDSubject = NA,
relationshipID = NA,
sampleIDObject = NA,
lastEdited = NA,
notes = NA
)
asset.list <- list(parts=parts,sets=sets,languages=languages,translations=translations,countries=countries,zones=zones,
measures=measures,measureSets=measureSets,samples=samples,sampleRelationships=sampleRelationships,qualityReports=qualityReports,
protocols=protocols,protocolRelationships=protocolRelationships,protocolSteps=protocolSteps,
contacts=contacts,sites=sites,addresses=addresses,polygons=polygons,datasets=datasets,organizations=organizations,instruments=instruments)
write_xlsx(
asset.list,
"PHES-ODM Example data V-2-2-0 (delatolla).xlsx")
sub_folder <- "example_data_Delatolla_csv_assets-V2"
dir.create(sub_folder, showWarnings = FALSE)
# Write tibbles to CSV files within the sub-folder
for (name in names(asset.list)) {67
file_path <- file.path(sub_folder, paste0(name, ".csv"))
write.csv(asset.list[[name]], file = file_path, row.names = FALSE)
}
CPHD_QC <- read.csv(file = "centreau_qc_data-V1/CovidPublicHealthData.csv")
LabQC <- read.csv("centreau_qc_data-V1/Lab.csv")
PolygonQC <- read.csv("centreau_qc_data-V1/Polygon.csv")
ReporterQC <- read.csv("centreau_qc_data-V1/Reporter.csv")
SampleQC <- read.csv("centreau_qc_data-V1/Sample.csv")
SiteQC <- read.csv("centreau_qc_data-V1/Site.csv")
SiteMeasureQC <- read.csv("centreau_qc_data-V1/SiteMeasure.csv")
WWMeasureQC <- read.csv("centreau_qc_data-V1/WWMeasure.csv")
View(WWMeasureQC)
summary(as.factor(WWMeasureQC$value))
summary(as.factor(WWMeasureQC$type))
WWMeasureQC$wwMeasureID <- as.factor(WWMeasureQC$wwMeasureID)
WWMeasureQC$reporterID <- as.factor(WWMeasureQC$reporterID)
WWMeasureQC$sampleID <- as.factor(WWMeasureQC$sampleID)
WWMeasureQC$labID <- as.factor(WWMeasureQC$labID)
WWMeasureQC$fractionAnalyzed <- as.factor(WWMeasureQC$fractionAnalyzed)
WWMeasureQC$type <- as.factor(WWMeasureQC$type)
WWMeasureQC$unit <- as.factor(WWMeasureQC$unit)
WWMeasureQC$aggregation <- as.factor(WWMeasureQC$aggregation)
WWMeasureQC$qualityFlag <- as.factor(WWMeasureQC$qualityFlag)
summary(WWMeasureQC)
library(tidyverse)
install.packages("readxl")
library(readxl)
library(tidyr)
library(lubridate)
ottawa.df <- as.data.frame(readxl::read_excel("Ottawa/Data/ottawa_data.xlsx")) %>%
drop_na(sample_date)
options(scipen = 999)
library(tidyr)
library(dplyr)
library(writexl)
CPHD_QC <- read.csv(file = "centreau_qc_data-V1/CovidPublicHealthData.csv")
LabQC <- read.csv("centreau_qc_data-V1/Lab.csv")
PolygonQC <- read.csv("centreau_qc_data-V1/Polygon.csv")
ReporterQC <- read.csv("centreau_qc_data-V1/Reporter.csv")
SampleQC <- read.csv("centreau_qc_data-V1/Sample.csv")
SiteQC <- read.csv("centreau_qc_data-V1/Site.csv")
SiteMeasureQC <- read.csv("centreau_qc_data-V1/SiteMeasure.csv")
WWMeasureQC <- read.csv("centreau_qc_data-V1/WWMeasure.csv")
View(WWMeasureQC)
summarise(CPHD_QC)
describe(CPHD_QC)
install.packages("Hmisc")
library(Hmisc)
describe(CPHD_QC)
describe(LabQC)
describe(CPHD_QC)
CPHD_QC$reporterID <- as.factor(CPHD_QC$reporterID)
CPHD_QC$polygonID <- as.factor(CPHD_QC$polygonID)
CPHD_QC$date <- as.Date(CPHD_QC$date)
CPHD_QC$dateType <- as.factor(CPHD_QC$dateType)
CPHD_QC$cphdID <- as.factor(CPHD_QC$cphdID)
options(scipen = 999)
library(tidyr)
library(dplyr)
library(writexl)
library(Hmisc)
## CPHD Data ##
# import the original data
CPHD_QC <- read.csv(file = "centreau_qc_data-V1/CovidPublicHealthData.csv")
describe(CPHD_QC)
CPHD_QC$cphdID <- as.factor(CPHD_QC$cphdID)
CPHD_QC$reporterID <- as.factor(CPHD_QC$reporterID)
CPHD_QC$polygonID <- as.factor(CPHD_QC$polygonID)
CPHD_QC$date <- as.Date(CPHD_QC$date)
CPHD_QC$measure <- as.factor("cov")
CPHD_QC$type <- as.factor(CPHD_QC$type)
CPHD_QC$dateType <- as.factor(CPHD_QC$dateType)
colnames(CPHD_QC) <- c("measureRepID", "organizationID", "polygonID", "reportDate", "unit", "value", "notes", "measure")
colnames(CPHD_QC) <- c("measureRepID", "organizationID", "polygonID", "reportDate", "unit", "dateType", "value", "notes", "measure")
## Lab Data ##
# import the original data
LabQC <- read.csv("centreau_qc_data-V1/Lab.csv")
describe(LabQC)
LabQC$labID <- as.factor(LabQC$labID)
LabQC$contactName <- as.factor(LabQC$contactName)
LabQC$contactName <- ifelse(LabQC$contactName == "dominic frigon","frigonDominic","vanrolleghemPeter")
LabQC$contactName <- as.factor(LabQC$contactName)
View(LabQC)
colnames(LabQC) <- c("organizationID", "name", "contactID")
PolygonQC <- read.csv("centreau_qc_data-V1/Polygon.csv")
describe(PolygonQC)
PolygonQC$polygonID <- as.factor(PolygonQC$polygonID)
PolygonQC$type <- as.factor(PolygonQC$type)
colnames(PolygonQC) <- c("polygonID", "name", "polyPop", "geoType", "geoWKT", "notes")
## Reporter Data ##
# import the original data
ReporterQC <- read.csv("centreau_qc_data-V1/Reporter.csv")
describe(ReporterQC)
ReporterQC$reporterID <- as.factor(ReporterQC$reporterID)
str_split(ReporterQC$contactName, " ")
library(stringr)
str_split(ReporterQC$contactName, " ")
ReporterQC$contactName <- str_split(ReporterQC$contactName, " ")
View(ReporterQC)
ReporterQC$contactName[1]
ReporterQC$contactName[1,]
ReporterQC$contactName[,1]
ReporterQC <- read.csv("centreau_qc_data-V1/Reporter.csv")
describe(ReporterQC)
ReporterQC$reporterID <- as.factor(ReporterQC$reporterID)
ReporterQC$contactName <- str_split(ReporterQC$contactName, " ")
ReporterQC %>%
separate_wider_delim(contactName, " ", names = c("firstName", "lastName"))
ReporterQC %>%
separate_wider_delim(contactName, " ", names = c("firstName", "lastName"), NA)
ReporterQC %>%
separate_wider_delim(contactName, " ", names = c("firstName", "lastName"), fill = "right")
ReporterQC <- read.csv("centreau_qc_data-V1/Reporter.csv")
describe(ReporterQC)
ReporterQC$reporterID <- as.factor(ReporterQC$reporterID)
ReporterQC$contactName <- str_split(ReporterQC$contactName, " ")
ReporterQC %>%
separate_wider_delim(contactName, " ", names = c("firstName", "lastName"), fill = "right")
## Reporter Data ##
# import the original data
ReporterQC <- read.csv("centreau_qc_data-V1/Reporter.csv")
ReporterQC$reporterID <- as.factor(ReporterQC$reporterID)
ReporterQC %>%
separate_wider_delim(contactName, " ", names = c("firstName", "lastName"), fill = "right")
ReporterQC %>%
separate(contactName, " ", names = c("firstName", "lastName"), fill = "right")
ReporterQC %>%
separate(contactName, " ", c("firstName", "lastName"), fill = "right")
ReporterQC %>%
separate(contactName, c("firstName", "lastName"), fill = "right")
ReporterQC <- ReporterQC %>%
separate(contactName, c("firstName", "lastName"), fill = "right")
ReporterQC$LabID <- as.factor(ReporterQC$LabID)
colnames(ReporterQC) <- c("contactID", "firstName", "lastName", "organizationID", "notes")
## Sample Data ##
# import the original data
SampleQC <- read.csv("centreau_qc_data-V1/Sample.csv")
describe(SampleQC)
View(ReporterQC)
SampleQC[-c("instrumentID","dateTime","children","parent","fieldSampleTempC")]
SampleQC <- SampleQC[,-c("instrumentID","dateTime","children","parent","fieldSampleTempC")]
SampleQC <- SampleQC[-c("instrumentID","dateTime","children","parent","fieldSampleTempC"),]
drops <- c("instrumentID","dateTime","children","parent","fieldSampleTempC")
SampleQC[ , !(names(SampleQC) %in% drops)]
SampleQC <- SampleQC[ , !(names(SampleQC) %in% drops)]
SampleQC$sampleID <- as.factor(SampleQC$sampleID)
SampleQC$siteID <- as.factor(SampleQC$siteID)
SampleQC$reporterID[SampleQC$reporterID == "maryam tohidi"]
View(ReporterQC)
SampleQC$reporterID[SampleQC$reporterID == "maryam tohidi"] <- "modeleau_lab_maryam"
describe(SampleQC)
SampleQC$reporterID[SampleQC$reporterID == "romain philippe"] <- "modeleau_lab_romain"
View(ReporterQC)
SampleQC$reporterID[SampleQC$reporterID == "daniel bolduc"] <- "??_daniel_bolduc"
describe(SampleQC)
View(CPHD_QC)
View(LabQC)
View(PolygonQC)
View(ReporterQC)
SampleQC$dateTimeStart <- as.Date(SampleQC$dateTimeStart)
View(SampleQC)
install.packages("chron")
library(chron)
SampleQC$type[SampleQC$type == "rawwwww"] <- "rawww"
SampleQC$type <- as.factor(SampleQC$type)
## Sample Data ##
# import the original data
SampleQC <- read.csv("centreau_qc_data-V1/Sample.csv")
drops <- c("instrumentID","dateTime","children","parent","fieldSampleTempC")
SampleQC <- SampleQC[ , !(names(SampleQC) %in% drops)]
SampleQC$sampleID <- as.factor(SampleQC$sampleID)
SampleQC$siteID <- as.factor(SampleQC$siteID)
SampleQC$reporterID[SampleQC$reporterID == "maryam tohidi"] <- "modeleau_lab_maryam"
SampleQC$reporterID[SampleQC$reporterID == "romain philippe"] <- "modeleau_lab_romain"
SampleQC$reporterID[SampleQC$reporterID == "daniel bolduc"] <- "??_daniel_bolduc"
SampleQC$reporterID <- as.factor(SampleQC$reporterID)
SampleQC$dateTimeStart <- chron(SampleQC$dateTimeStart)
library(lubridate)
SampleQC$dateTimeStart <- ymd_hms((SampleQC$dateTimeStart)
SampleQC$dateTimeStart <- ymd_hms(SampleQC$dateTimeStart)
SampleQC$dateTimeEnd <- ymd_hms(SampleQC$dateTimeEnd)
SampleQC$dateTimeStart <- ymd_hms(SampleQC$dateTimeStart)
SampleQC$type[SampleQC$type == "rawwwww"] <- "rawww"
SampleQC$type <- as.factor(SampleQC$type)
describe(SampleQC)
SampleQC$preTreatment <- as.logical(SampleQC$preTreatment)
SampleQC$pooled <- as.logical(SampleQC$pooled)
SampleQC$shippedOnIce <- as.logical(SampleQC$shippedOnIce)
SampleQC$qualityFlag <- as.logical(SampleQC$qualityFlag)
describe(SampleQC)
SampleQC$collType <- NA
SampleQC$collType[SampleQC$collection == "cptp24h"] <- "timePr"
SampleQC$collType[SampleQC$collection == "cpfp24h"] <- "flowPr"
SampleQC$collType <- as.factor(SampleQC$collType)
SampleQC$collPer <- NA
SampleQC$collPer[SampleQC$collection == "cptp24h"] <- 24
SampleQC$collPer[SampleQC$collection == "cpfp24h"] <- 24
SampleQC$collNum <- NA
SampleQC$collNum[SampleQC$collection == "cptp24h"] <- 24
describe(SampleQC)
colnames(SampleQC) <- c("sampleID", "siteID", "contactID", "collDTStart", "collDTEnd", "saMaterial", "collectDEP",
"method_pretreat", "pooled", "measure_sizeL", "index", "measure_shippedOnIce", "measure_stoTemp",
"qualityFlag", "notes", "collType", "collPer", "collNum")
## Site Data ##
# import the original data
SiteQC <- read.csv("centreau_qc_data-V1/Site.csv")
describe(SiteQC)
SiteQC$siteID <- as.factor(SiteQC$siteID)
SiteQC$type <- as.factor(SiteQC$type)
SiteQC$polygonID <- as.factor(SiteQC$polygonID)
SiteQC <- SiteQC[ , !(names(SiteQC) %in% drops)]
drops <- c("publicHealthDepartment healthRegion", "link", "notes")
SiteQC <- SiteQC[ , !(names(SiteQC) %in% drops)]
drops <- c("publicHealthDepartment", "healthRegion", "link", "notes")
SiteQC <- SiteQC[ , !(names(SiteQC) %in% drops)]
SiteQC$sampleShed <- as.factor("municp")
colnames(SiteQC) <- c("siteID","name","descr","siteType","geoLat","geoLong","polygonID","sampleShed")
## Site Measure Data ##
# import the original data
SiteMeasureQC <- read.csv("centreau_qc_data-V1/SiteMeasure.csv")
View(SiteMeasureQC)
describe(SiteMeasureQC)
drops <- c("sampleID")
SiteMeasureQC <- SiteMeasureQC[ , !(names(SiteMeasureQC) %in% drops)]
SiteMeasureQC$siteMeasureID <- as.factor(SiteMeasureQC$siteMeasureID)
SiteMeasureQC$siteID <- as.factor(SiteMeasureQC$siteID)
SiteMeasureQC$instrumentID <- as.factor(SiteMeasureQC$instrumentID)
SiteMeasureQC$reporterID <- as.factor(SiteMeasureQC$reporterID)
SiteMeasureQC$dateTime <- ymd_hms(SiteMeasureQC$dateTime)
SiteMeasureQC$type <- as.factor(SiteMeasureQC$type)
SiteMeasureQC$aggregation <- as.factor(SiteMeasureQC$aggregation)
SiteMeasureQC$unit <- as.factor(SiteMeasureQC$unit)
## WW Measure Data ##
# import the original data
WWMeasureQC <- read.csv("centreau_qc_data-V1/WWMeasure.csv")
describe(WWMeasureQC)
drops <- c("assayMethodID","reportDate")
WWMeasureQC <- WWMeasureQC[ , !(names(WWMeasureQC) %in% drops)]
WWMeasureQC$wwMeasureID <- as.factor(WWMeasureQC$wwMeasureID)
WWMeasureQC$reporterID <- as.factor(WWMeasureQC$reporterID)
WWMeasureQC$sampleID <- as.factor(WWMeasureQC$sampleID)
WWMeasureQC$labID <- as.factor(WWMeasureQC$labID)
WWMeasureQC$analysisDate <- as.Date(WWMeasureQC$analysisDate)
WWMeasureQC$fractionAnalyzed <- as.factor(WWMeasureQC$fractionAnalyzed)
WWMeasureQC$type <- as.factor(WWMeasureQC$type)
WWMeasureQC$unit <- as.factor(WWMeasureQC$unit)
WWMeasureQC$aggregation <- as.factor(WWMeasureQC$aggregation)
WWMeasureQC$qualityFlag <- as.factor(WWMeasureQC$qualityFlag)
colnames(SiteMeasureQC) <- c("measureRepID","siteID","instrumentID","contactID","aDateEnd","measure","aggregation",
"aggregation_descr","value","unit","notes")
colnames(WWMeasureQC) <- c("measureRepID","contactID","sampleID","organizationID","aDateEnd","fraction","measure","value","unit",
"aggregation","index","qualityFlag","notes")
parts <- read.csv("ref-tables-v2/ODM_parts_2.1.0 copy.csv")
sets <- read.csv("ref-tables-v2/ODM_sets.csv")
languages <- read.csv("ref-tables-v2/ODM_languages.csv")
translations <- read.csv("ref-tables-v2/ODM_translations_2.1.0 copy.csv")
countries <- read.csv("ref-tables-v2/ODM_countries.csv")
zones <- read.csv("ref-tables-v2/ODM_zones.csv")
